{"version":3,"sources":["js-src/tests/adapters/application.jshint.js","js-src/tests/app.jshint.js","js-src/tests/components/ladda-button.jshint.js","js-src/tests/components/validated-input.jshint.js","js-src/tests/components/validated-input2.jshint.js","js-src/tests/components/whois-table.jshint.js","js-src/tests/controllers/application.jshint.js","js-src/tests/controllers/checkout.jshint.js","js-src/tests/controllers/step-check-email.jshint.js","js-src/tests/controllers/step-enter-email.jshint.js","js-src/tests/controllers/step-select-domains.jshint.js","js-src/tests/helpers/destroy-app.js","js-src/tests/helpers/destroy-app.jshint.js","js-src/tests/helpers/ember-simple-auth.js","js-src/tests/helpers/module-for-acceptance.js","js-src/tests/helpers/module-for-acceptance.jshint.js","js-src/tests/helpers/resolver.js","js-src/tests/helpers/resolver.jshint.js","js-src/tests/helpers/start-app.js","js-src/tests/helpers/start-app.jshint.js","js-src/tests/helpers/validate-properties.js","js-src/tests/integration/components/ladda-button-test.js","js-src/tests/integration/components/ladda-button-test.jshint.js","js-src/tests/integration/components/validated-input-test.js","js-src/tests/integration/components/validated-input-test.jshint.js","js-src/tests/integration/components/whois-table-test.js","js-src/tests/integration/components/whois-table-test.jshint.js","js-src/tests/models/availability.jshint.js","js-src/tests/models/reservation.jshint.js","js-src/tests/models/whois.jshint.js","js-src/tests/resolver.jshint.js","js-src/tests/router.jshint.js","js-src/tests/routes/application.jshint.js","js-src/tests/routes/checkout.jshint.js","js-src/tests/routes/complete.jshint.js","js-src/tests/routes/index.jshint.js","js-src/tests/routes/step-check-email.jshint.js","js-src/tests/routes/step-enter-email.jshint.js","js-src/tests/routes/step-select-domains.jshint.js","js-src/tests/serializers/application.jshint.js","js-src/tests/test-helper.js","js-src/tests/test-helper.jshint.js","js-src/tests/unit/controllers/application-test.js","js-src/tests/unit/controllers/application-test.jshint.js","js-src/tests/unit/controllers/checkout-test.js","js-src/tests/unit/controllers/checkout-test.jshint.js","js-src/tests/unit/controllers/step-check-email-test.js","js-src/tests/unit/controllers/step-check-email-test.jshint.js","js-src/tests/unit/controllers/step-enter-email-test.js","js-src/tests/unit/controllers/step-enter-email-test.jshint.js","js-src/tests/unit/controllers/step-select-domains-test.js","js-src/tests/unit/controllers/step-select-domains-test.jshint.js","js-src/tests/unit/models/availability-test.js","js-src/tests/unit/models/availability-test.jshint.js","js-src/tests/unit/models/reservation-test.js","js-src/tests/unit/models/reservation-test.jshint.js","js-src/tests/unit/models/whois-test.js","js-src/tests/unit/models/whois-test.jshint.js","js-src/tests/unit/routes/application-test.js","js-src/tests/unit/routes/application-test.jshint.js","js-src/tests/unit/routes/checkout-test.js","js-src/tests/unit/routes/checkout-test.jshint.js","js-src/tests/unit/routes/complete-test.js","js-src/tests/unit/routes/complete-test.jshint.js","js-src/tests/unit/routes/index-test.js","js-src/tests/unit/routes/index-test.jshint.js","js-src/tests/unit/routes/step-accept-domain-test.js","js-src/tests/unit/routes/step-accept-domain-test.jshint.js","js-src/tests/unit/routes/step-check-email-test.js","js-src/tests/unit/routes/step-check-email-test.jshint.js","js-src/tests/unit/routes/step-enter-email-test.js","js-src/tests/unit/routes/step-enter-email-test.jshint.js","js-src/tests/unit/routes/verification-test.js","js-src/tests/unit/routes/verification-test.jshint.js","js-src/tests/unit/routes/whois-test.js","js-src/tests/unit/routes/whois-test.jshint.js","js-src/tests/unit/utils/test-utility-test.js","js-src/tests/unit/utils/test-utility-test.jshint.js","js-src/tests/unit/utils/utility-test-parser-test.js","js-src/tests/unit/utils/utility-test-parser-test.jshint.js","js-src/tests/utils/utility-domain-json.jshint.js","js-src/tests/utils/utility-domain-parser.jshint.js","js-src/tests/validators/local/email.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('js-src/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters');\n  QUnit.test('adapters/application.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('js-src/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('js-src/tests/components/ladda-button.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components');\n  QUnit.test('components/ladda-button.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/ladda-button.js should pass jshint.\\ncomponents/ladda-button.js: line 1, col 1, Use the function form of \"use strict\".\\ncomponents/ladda-button.js: line 72, col 15, \\'Ladda\\' is not defined.\\n\\n2 errors');\n  });\n});","define('js-src/tests/components/validated-input.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components');\n  QUnit.test('components/validated-input.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/validated-input.js should pass jshint.\\ncomponents/validated-input.js: line 1, col 1, Use the function form of \"use strict\".\\n\\n1 error');\n  });\n});","define('js-src/tests/components/validated-input2.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components');\n  QUnit.test('components/validated-input2.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/validated-input2.js should pass jshint.\\ncomponents/validated-input2.js: line 1, col 1, Use the function form of \"use strict\".\\n\\n1 error');\n  });\n});","define('js-src/tests/components/whois-table.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components');\n  QUnit.test('components/whois-table.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/whois-table.js should pass jshint.');\n  });\n});","define('js-src/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/application.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass jshint.');\n  });\n});","define('js-src/tests/controllers/checkout.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/checkout.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/checkout.js should pass jshint.');\n  });\n});","define('js-src/tests/controllers/step-check-email.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/step-check-email.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/step-check-email.js should pass jshint.');\n  });\n});","define('js-src/tests/controllers/step-enter-email.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/step-enter-email.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/step-enter-email.js should pass jshint.\\ncontrollers/step-enter-email.js: line 1, col 1, Use the function form of \"use strict\".\\ncontrollers/step-enter-email.js: line 58, col 11, \\'fullDomainName\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('js-src/tests/controllers/step-select-domains.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers');\n  QUnit.test('controllers/step-select-domains.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/step-select-domains.js should pass jshint.\\ncontrollers/step-select-domains.js: line 248, col 86, Missing semicolon.\\ncontrollers/step-select-domains.js: line 267, col 17, \\'err\\' is defined but never used.\\ncontrollers/step-select-domains.js: line 36, col 10, \\'sanitizeCustomerDomainName\\' is defined but never used.\\n\\n3 errors');\n  });\n});","define('js-src/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('js-src/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/destroy-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('js-src/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('js-src/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'js-src/tests/helpers/start-app', 'js-src/tests/helpers/destroy-app'], function (exports, _qunit, _jsSrcTestsHelpersStartApp, _jsSrcTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _jsSrcTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _jsSrcTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('js-src/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/module-for-acceptance.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('js-src/tests/helpers/resolver', ['exports', 'js-src/resolver', 'js-src/config/environment'], function (exports, _jsSrcResolver, _jsSrcConfigEnvironment) {\n\n  var resolver = _jsSrcResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _jsSrcConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _jsSrcConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('js-src/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('js-src/tests/helpers/start-app', ['exports', 'ember', 'js-src/app', 'js-src/config/environment'], function (exports, _ember, _jsSrcApp, _jsSrcConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _jsSrcConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _jsSrcApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('js-src/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('js-src/tests/helpers/validate-properties', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n  exports.testValidPropertyValues = testValidPropertyValues;\n  exports.testInvalidPropertyValues = testInvalidPropertyValues;\n\n  var run = _ember['default'].run;\n\n  function validateValues(object, propertyName, values, isTestForValid) {\n    var promise = null;\n    var validatedValues = [];\n\n    values.forEach(function (value) {\n      function handleValidation(errors) {\n        var hasErrors = object.get('errors.' + propertyName + '.firstObject');\n        if (hasErrors && !isTestForValid || !hasErrors && isTestForValid) {\n          validatedValues.push(value);\n        }\n      }\n\n      run(object, 'set', propertyName, value);\n\n      var objectPromise = null;\n      run(function () {\n        objectPromise = object.validate().then(handleValidation, handleValidation);\n      });\n\n      // Since we are setting the values in a different run loop as we are validating them,\n      // we need to chain the promises so that they run sequentially. The wrong value will\n      // be validated if the promises execute concurrently\n      promise = promise ? promise.then(objectPromise) : objectPromise;\n    });\n\n    return promise.then(function () {\n      return validatedValues;\n    });\n  }\n\n  function testPropertyValues(propertyName, values, isTestForValid, context) {\n    var validOrInvalid = isTestForValid ? 'Valid' : 'Invalid';\n    var testName = validOrInvalid + ' ' + propertyName;\n\n    (0, _emberQunit.test)(testName, function (assert) {\n      var object = this.subject();\n\n      if (context && typeof context === 'function') {\n        context(object);\n      }\n\n      // Use QUnit.dump.parse so null and undefined can be printed as literal 'null' and\n      // 'undefined' strings in the assert message.\n      var valuesString = QUnit.dump.parse(values).replace(/\\n(\\s+)?/g, '').replace(/,/g, ', ');\n      var assertMessage = 'Expected ' + propertyName + ' to have ' + validOrInvalid.toLowerCase() + ' values: ' + valuesString;\n\n      return validateValues(object, propertyName, values, isTestForValid).then(function (validatedValues) {\n        assert.deepEqual(validatedValues, values, assertMessage);\n      });\n    });\n  }\n\n  function testValidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, true, context);\n  }\n\n  function testInvalidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, false, context);\n  }\n});","define('js-src/tests/integration/components/ladda-button-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('ladda-button', 'Integration | Component | ladda button', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'ladda-button', ['loc', [null, [1, 0], [1, 16]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'ladda-button', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('js-src/tests/integration/components/ladda-button-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/ladda-button-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ladda-button-test.js should pass jshint.');\n  });\n});","define('js-src/tests/integration/components/validated-input-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('validated-input', 'Integration | Component | validated input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'validated-input', ['loc', [null, [1, 0], [1, 19]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'validated-input', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('js-src/tests/integration/components/validated-input-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/validated-input-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/validated-input-test.js should pass jshint.');\n  });\n});","define('js-src/tests/integration/components/whois-table-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('whois-table', 'Integration | Component | whois table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 15\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'whois-table', ['loc', [null, [1, 0], [1, 15]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'whois-table', [], [], 0, null, ['loc', [null, [2, 4], [4, 20]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('js-src/tests/integration/components/whois-table-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components');\n  QUnit.test('integration/components/whois-table-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/whois-table-test.js should pass jshint.');\n  });\n});","define('js-src/tests/models/availability.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/availability.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/availability.js should pass jshint.');\n  });\n});","define('js-src/tests/models/reservation.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/reservation.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/reservation.js should pass jshint.\\nmodels/reservation.js: line 1, col 1, Use the function form of \"use strict\".\\n\\n1 error');\n  });\n});","define('js-src/tests/models/whois.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/whois.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/whois.js should pass jshint.');\n  });\n});","define('js-src/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('js-src/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('js-src/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/application.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('js-src/tests/routes/checkout.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/checkout.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/checkout.js should pass jshint.\\nroutes/checkout.js: line 14, col 7, Missing semicolon.\\n\\n1 error');\n  });\n});","define('js-src/tests/routes/complete.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/complete.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/complete.js should pass jshint.');\n  });\n});","define('js-src/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/index.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('js-src/tests/routes/step-check-email.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/step-check-email.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/step-check-email.js should pass jshint.');\n  });\n});","define('js-src/tests/routes/step-enter-email.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/step-enter-email.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/step-enter-email.js should pass jshint.\\nroutes/step-enter-email.js: line 1, col 1, Use the function form of \"use strict\".\\n\\n1 error');\n  });\n});","define('js-src/tests/routes/step-select-domains.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes');\n  QUnit.test('routes/step-select-domains.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/step-select-domains.js should pass jshint.\\nroutes/step-select-domains.js: line 19, col 21, \\'transition\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('js-src/tests/serializers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers');\n  QUnit.test('serializers/application.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass jshint.');\n  });\n});","define('js-src/tests/test-helper', ['exports', 'js-src/tests/helpers/resolver', 'ember-qunit'], function (exports, _jsSrcTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_jsSrcTestsHelpersResolver['default']);\n});","define('js-src/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/controllers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('js-src/tests/unit/controllers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/application-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/controllers/checkout-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:checkout', 'Unit | Controller | checkout', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('js-src/tests/unit/controllers/checkout-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/checkout-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/checkout-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/controllers/step-check-email-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:step-check-email', 'Unit | Controller | step check email', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('js-src/tests/unit/controllers/step-check-email-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/step-check-email-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/step-check-email-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/controllers/step-enter-email-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:step-enter-email', 'Unit | Controller | step enter email', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('js-src/tests/unit/controllers/step-enter-email-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/step-enter-email-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/step-enter-email-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/controllers/step-select-domains-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:step-select-domains', 'Unit | Controller | step select domains', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('js-src/tests/unit/controllers/step-select-domains-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers');\n  QUnit.test('unit/controllers/step-select-domains-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/step-select-domains-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/models/availability-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('availability', 'Unit | Model | availability', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('js-src/tests/unit/models/availability-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/availability-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/availability-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/models/reservation-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('reservation', 'Unit | Model | reservation', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('js-src/tests/unit/models/reservation-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/reservation-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/reservation-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/models/whois-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('whois', 'Unit | Model | whois', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('js-src/tests/unit/models/whois-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/whois-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/whois-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('js-src/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/application-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/routes/checkout-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:checkout', 'Unit | Route | checkout', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('js-src/tests/unit/routes/checkout-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/checkout-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/checkout-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/routes/complete-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:complete', 'Unit | Route | complete', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('js-src/tests/unit/routes/complete-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/complete-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/complete-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('js-src/tests/unit/routes/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/index-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/routes/step-accept-domain-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:step-accept-domain', 'Unit | Route | step accept domain', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('js-src/tests/unit/routes/step-accept-domain-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/step-accept-domain-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/step-accept-domain-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/routes/step-check-email-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:step-check-email', 'Unit | Route | step check email', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('js-src/tests/unit/routes/step-check-email-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/step-check-email-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/step-check-email-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/routes/step-enter-email-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:step-enter-email', 'Unit | Route | step enter email', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('js-src/tests/unit/routes/step-enter-email-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/step-enter-email-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/step-enter-email-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/routes/verification-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:verification', 'Unit | Route | verification', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('js-src/tests/unit/routes/verification-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/verification-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/verification-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/routes/whois-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:whois', 'Unit | Route | whois', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('js-src/tests/unit/routes/whois-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes');\n  QUnit.test('unit/routes/whois-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/whois-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/utils/test-utility-test', ['exports', 'js-src/utils/test-utility', 'qunit'], function (exports, _jsSrcUtilsTestUtility, _qunit) {\n\n  (0, _qunit.module)('Unit | Utility | test utility');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _jsSrcUtilsTestUtility['default'])();\n    assert.ok(result);\n  });\n});","define('js-src/tests/unit/utils/test-utility-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils');\n  QUnit.test('unit/utils/test-utility-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/test-utility-test.js should pass jshint.');\n  });\n});","define('js-src/tests/unit/utils/utility-test-parser-test', ['exports', 'js-src/utils/utility-test-parser', 'qunit'], function (exports, _jsSrcUtilsUtilityTestParser, _qunit) {\n\n  (0, _qunit.module)('Unit | Utility | utility test parser');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _jsSrcUtilsUtilityTestParser['default'])();\n    assert.ok(result);\n  });\n});","define('js-src/tests/unit/utils/utility-test-parser-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils');\n  QUnit.test('unit/utils/utility-test-parser-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/utility-test-parser-test.js should pass jshint.');\n  });\n});","define('js-src/tests/utils/utility-domain-json.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - utils');\n  QUnit.test('utils/utility-domain-json.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/utility-domain-json.js should pass jshint.');\n  });\n});","define('js-src/tests/utils/utility-domain-parser.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - utils');\n  QUnit.test('utils/utility-domain-parser.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'utils/utility-domain-parser.js should pass jshint.\\nutils/utility-domain-parser.js: line 10, col 17, Confusing use of \\'!\\'.\\n\\n1 error');\n  });\n});","define('js-src/tests/validators/local/email.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - validators/local');\n  QUnit.test('validators/local/email.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validators/local/email.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('js-src/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}