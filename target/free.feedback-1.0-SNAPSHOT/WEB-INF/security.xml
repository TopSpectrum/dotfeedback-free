<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                http://www.springframework.org/schema/security
                http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <import resource="mvc-common.xml"/>
    <import resource="classpath:security-oauth.xml"/>

    <!-- Static resources such as CSS and JS files are ignored by Spring Security -->
    <security:http pattern="/083BF2CB1D7E28926F6C02CD4E493E69.txt" security="none"/>
    <security:http pattern="/assets/**" security="none"/>
    <security:http pattern="/assets/favicon.ico" security="none" />

    <!--<bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandler" />-->

    <!--<security:http-->
            <!--create-session="always"-->
            <!--disable-url-rewriting="true"-->
            <!--use-expressions="true"-->
            <!--security-context-repository-ref="httpSessionSecurityContextRepository"-->
            <!--pattern="/**">-->

        <!--&lt;!&ndash; Enables Spring Security CSRF protection &ndash;&gt;-->
        <!--<security:csrf disabled="true"/>-->
        <!--<security:access-denied-handler error-page="/403"/>-->

        <!--&lt;!&ndash; Anyone can access these urls &ndash;&gt;-->
        <!--<security:intercept-url pattern="/favicon.ico" access="permitAll"/>-->

        <!--&lt;!&ndash; The rest of our application is protected. &ndash;&gt;-->
        <!--<security:intercept-url pattern="/**" access="permitAll"/>-->
    <!--</security:http>-->

    <!-- This is used to hash the password of the user. -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <constructor-arg index="0" value="10"/>
    </bean>

    <!--
        This bean encrypts the authorization details of the connection. In
        our example, the authorization details are stored as plain text.
        DO NOT USE THIS IN PRODUCTION.
    -->
    <bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText"/>

    <!--
        This bean determines the account ID of the user. The example application
        uses the username as the account ID.
    -->
    <bean id="userIdSource" class="org.springframework.social.security.AuthenticationNameUserIdSource"/>

    <bean id="httpSessionSecurityContextRepository"
          class="org.springframework.security.web.context.HttpSessionSecurityContextRepository"/>

    <!--&lt;!&ndash; If someone doesn't provide the right info, just reject them. All other 'entry points' would show a login screen. &ndash;&gt;-->
    <bean id="forbiddenAuthenticationEntryPoint"
          class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>

</beans>